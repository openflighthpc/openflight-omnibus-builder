#!/usr/bin/env ruby
#==============================================================================
# Copyright (C) 2020-present Alces Flight Ltd.
#
# This file is part of OpenFlight Omnibus Builder.
#
# This program and the accompanying materials are made available under
# the terms of the Eclipse Public License 2.0 which is available at
# <https://www.eclipse.org/legal/epl-2.0>, or alternative license
# terms made available by Alces Flight Ltd - please direct inquiries
# about licensing to licensing@alces-flight.com.
#
# This project is distributed in the hope that it will be useful, but
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR
# IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS
# OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A
# PARTICULAR PURPOSE. See the Eclipse Public License 2.0 for more
# details.
#
# You should have received a copy of the Eclipse Public License 2.0
# along with this project. If not, see:
#
#  https://opensource.org/licenses/EPL-2.0
#
# For more information on OpenFlight Omnibus Builder, please visit:
# https://github.com/openflighthpc/openflight-omnibus-builder
#===============================================================================

# Removes the log path as the first argument of ARGV, this is required otherwise
# it will be passed to falcon
log_path = ARGV.shift

# Redirects $stderr to the specified log_path
# NOTE: This has only be tested in threaded mode where all children share $stderr
#       It still needs testing in forking mode, where the children are separate
require 'fileutils'
FileUtils.mkdir_p File.dirname(log_path)
$stderr = File.open(log_path, 'a')
$stderr.sync = true # Do not buffer internally within ruby

# Sets up SIGUSR2 to reopen the log file as this is not natively supported by falcon
trap('SIGUSR2') do
  begin
    # Ensure the old descriptor is closed
    $stderr.close
  rescue
    # NOOP
  ensure
    # Reopen the file descriptor
    $stderr.reopen($stderr.path, 'a')
    $stderr.sync = true # Do not buffer internally within ruby
  end
end

# Loads the falcon script
load File.expand_path('falcon', __dir__)
