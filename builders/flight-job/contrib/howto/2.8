# Flight Job(1) - Create and submit jobs from predefined templates

## Overview

The `Flight Job` utility is comprised of three main sections:
* `templates` - Generic script and question definitions,
* `scripts` - Rendered job files which are ready to be submitted, and
* `jobs` - A record of scripts which have been submitted to the scheduler

~~~
$ flight job --help
  NAME:

    flight job

  DESCRIPTION:

    Generate and submit jobs from predefined templates

  COMMANDS:

    Templates:
    list-templates    List available templates
    info-template     Display details about a template
    copy-template     Generate a local version of a template

    Scripts:
    list-scripts      List your rendered scripts
    create-script     Render a new script from a template
    info-script       Display details about a rendered script
    view-script       View the content of a script
    edit-script       Open the script in your editor
    edit-script-notes Open the notes in your system editor
    delete-script     Permanently remove a script

    Jobs:
    list-jobs         List your previously submitted jobs
    submit-job        Schedule a new job to run from a script
    info-job          Display details about a submitted job
    delete-job        Permanently remove a job

    Job Files:
    list-job-results  Run the ls command within the job's results directory
    view-job-results  View a file within the job's results directory
    view-job-stdout   View the job's standard output
    view-job-stderr   View the job's standard error

    Miscellaneous:
    help              Display global or [command] help documentation
    run-monitor       Update the internal state of the data cache

  ALIASES:
  
    copy           copy-template   
    cp             copy-template   
    create         create-script   
    ls-job-results list-job-results   
    submit         submit-job   

  GLOBAL OPTIONS:

    -h, --help
        Display help documentation

    --version
        Display version information

    --verbose
        Display additional details, when supported

    --pretty
        Display a human friendly output, when supported

    --ascii
        Display a simplified version of the output, when supported

    --json
        Display a JSON version of the output, when supported

~~~

## TEMPLATE COMMANDS

Flight Job maintains a library of `templates` which are used to generate
customised \"job scripts\". These `templates` contain various markup tags which
must be rendered to a `script` before submitting a `job`.

Refer to `create-script` below on how to generate a `script` from a `template`.

### list-templates: View the available templates

The available templates can displayed using the `list-templates` command:

~~~
$ flight job list-templates
+-------+--------+
| Index | Name   |
+-------+--------+
| 1     | simple |
+-------+--------+
~~~

*NOTE*: A template's `Index` is determined by the alphanumeric ordering of the
current templates and is not guaranteed to be consistent. A template's index
my change as templates are added.

### info-template: View details about a specific template

Details about a template can be viewed with  the `info-template` command.

The template can be found by name:

~~~
$ flight job info-template simple
simple

  DESCRIPTION

  This is an example output of a template.
  The installed templates and indices will be different.

  LICENSE

  This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.

  COPYRIGHT

  Copyright (C) 2020 Alces Flight Ltd.
~~~

### copy-template: Make a local copy of a template

Make a copy of a template within the current working or specified
directory. This is useful when you want to submit a job to the external
scheduler without using the `script`/`job` infrastructure within this tool.

This command will remove the markup contained within the template so it can
be used as a \"job script\". However minor modifications may be required on
a case by case basis.

~~~
# Copying into the current working directory
flight job copy-template simple
Successfully copied the template to: /path/to/cwd/simple.sh

# Copying into an existing directory
flight job copy-template simple /tmp
Successfully copied the template to: /tmp/simple.sh

# Renaming the template:
flight job copy-template simple /tmp/foo.sh
Successfully copied the template to: /tmp/foo.sh
~~~

## SCRIPT COMMANDS

Once a `template` is rendered it becomes a `script` stored in your own
script library. Your `scripts` are ready to be submitted to the scheduler as
a `job`.

Refer to `submit-job` below on how to submit a `job` from a `script`.

### create-script: Render a script from a template

New `scripts` can be generated with the `create-script` command. This will step
you through various question prompts and render the `script`. The response after
the question prompts is the same as the `info-script` command.

The script can also be given an optional `name`:

~~~
# Without a script name
$ flight job create-script simple
Working directory /home/%u
Set an output file for STDOUT job-%j.output
... See info-script for output ...

# With a script name
$ flight job create-script simple script-foo
Working directory /home/%u
Set an output file for STDOUT job-%j.output
... See info-script for output ...
~~~

It is possible to run the command in a non-interactive session using the
`--answers` flag. The answers can be provided in the following ways:

1. As a JSON string: `--answers '{ ... }'`,
2. Within a file: `--answers file.json`, or
3. Via the standard input: `--answers @-`

~~~
# Providing the answers as a string
$ flight job create-script simple --answers '{ "foo_question": "foo_answer" }'

# Providing the answers within a file
$ flight job create-script simple --answers @/path/to/answers.json

# Providing the answers via STDIN
$ echo { \"foo_question\": \"foo_answer\" } | flight job create-script simple --answers @-
~~~

Additional notes about the script can be provided within the `--notes` flag.
Similarly to the answers, the `notes` can be provided in the following ways:

1. As a string: `--notes 'Details about the script'`,
2. Within a file: `--notes /path/to/notes.txt`, or
3. Via the standard input: `--notes @-`

~~~
# Providing the notes as a string
$ flight job create-script simple --notes 'Details about the script'

# Providing the notes within a file
$ flight job create-script simple --notes @/path/to/notes.txt

# Providing the notes via STDIN
# WARN: The question/answer prompts will be disabled when providing the notes
#       via the standard input. The answers must be provided with the --answers flag
$ echo Details about the script | flight job create-script simple --notes @- --answers '{ ... }'
~~~

### list-scripts: View your rendered scripts

A list of previously generated scripts is available with the `list-scripts`
command.

~~~
$ flight job list-scripts
+----------+-------------+-----------+----------------+
| ID       | Template ID | File Name | Created at     |
+----------+-------------+-----------+----------------+
| 2TCQdhJh | tophat      | tophat.sh | 11/03/21 12:15 |
| xpVrobuO | simple      | simple.sh | 11/03/21 14:23 |
+----------+-------------+-----------+----------------+
~~~

### info-scripts: View details about a specific script

Details about a specific script can be retrieved using the `info-script` command.

~~~
$ flight job info-script xpVrobuO
         ID: xpVrobuO
Template ID: simple
  File Name: simple.sh
       Path: /home/centos/.local/share/flight/job/scripts/xpVrobuO/simple.sh
 Created at: 11/03/21 14:23
~~~

### view-script: View the content of a script

The content of a script can be displayed with the `view-script` command.

~~~
$ flight job view-script xpVrobuO
.. The content of the script ..
~~~

### edit-script: Open the script in your editor

A script can be opened in your editor using the `edit-script` command.
The editor will be selected using the EDITOR or VISUAL environment variable.
Otherwise `vi` will be used as the default editor.

NOTE: The `script` should open at the start of your workload section in most
terminal editors.  The scheduler directives can be accessed by scrolling up.

~~~
$ flight job edit-script xpVrobuO
... opens the script in the system editor ...
~~~

### edit-script-notes: Open the script's notes in your editor

A script's notes can be opened in the system editor using the `edit-script-notes`
command. The editor will be selected in the same manner as the `edit-script`
command.

~~~
$ flight job edit-script-notes xpVrobuO
... opens the script in the system editor ...
~~~

### delete-script: Permanently remove a script

Permanently removes the previously rendered `script`. Associated `jobs` remain
unaffected.

~~~
$ flight job delete-script 2TCQdhJh
Removed script: 2TCQdhJh
~~~

## JOB COMMANDS

A record of `script` submissions is maintained as `jobs`. The `jobs` integrate
with an external scheduler and will periodically be updated with their progress.
Your `crontab` will be modified to perform the periodic check.

### submit-job: Submit a job to the scheduler

A previously rendered template can be submitted using the `submit-job`
command.  This will step you through various question prompts and then submit
the `script` creating a `job`.  The output of the command is the same as the
`info-job` command.

~~~
$ flight job submit-job xpVrobuO
... Similar to the info-job output ...
~~~

### list-jobs: View a record of submitted jobs

A list of previously submitted jobs is available with the `list-jobs` command:

~~~
$ flight job list-jobs
+----------+-----------+-----------+----------------+----------------+----------------+
| ID       | State     | Submitted | Created at     | Start at       | End at         |
+----------+-----------+-----------+----------------+----------------+----------------+
| nKJ6_BUr | COMPLETED | yes       | 11/03/21 13:20 | 11/03/21 13:20 | 11/03/21 13:20 |
| DmSBREgL | PENDING   | yes       | 11/03/21 16:14 | (none)         | (none)         |
+----------+-----------+-----------+----------------+----------------+----------------+
~~~

### info-job: View details about a specific job

Details about a specific job can retrieved using the `info-job` command.

~~~
$ flight job info-job DmSBREgL
              ID: DmSBREgL
       Script ID: 2TCQdhJh
    Scheduler ID: 76
           State: PENDING
       Submitted: yes
    Submitted at: 11/03/21 16:14
 Estimated Start: (none)
Estimated Finish: (none)
     Output Path: /home/centos/job/foo.output
     Results Dir: /home/centos/simple.sh-outputs/76
      Desktop ID: (none)
~~~

The output will include either the job's `Estimated Start` or its `Started at`
attribute, depending on whether the job's start is pending.  Similarly, the
output will include either the job's `Estimated Finish` or its `Ended at`
attribute depending on whether the job has finished.  Including the
`--verbose` flag will display both sets of times.

The \"Output Path\" attribute specify where the standard output/error has been saved.
It will be replaced with separate \"Stdout Path\" and \"Stderr Path\" attributes if
they have been redirected to different files.

The \"Submitted\" attribute flags if the scheduler successfully received the `job`.
It will be \"no\" if an error occurred during the submission. The raw error from
the scheduler can be retrieved using the `--verbose` flag. The exit status of the
submit command will replace \"Submitted\" column.

If the job script started an interactive session, its Flight Desktop ID will
be shown.  The command `flight desktop show ID` can be used to retrieve
details about the interactive session. 

~~~
$ flight job info-job YKOVUcyo --verbose
              ID: YKOVUcyo
       Script ID: u24B2xz6
    Scheduler ID: (none)
           State: FAILED
   Submit Status: yes
      Created at: 2021-03-11T16:19:40+00:00
        Start at: (none)
          End at: (none)
     Stdout Path: (none)
     Stderr Path: (none)
 Estimated Start: (none)
Estimated Finish: (none)
      Desktop ID: (none)

Submit Standard Out:

Submit Standard Error:
sbatch: error: Memory specification can not be satisfied
sbatch: error: Batch job submission failed: Requested node configuration is not available
~~~

### delete-job: Permanently remove a job

Permanently remove the record of a previously submitted job. This will not affect the
status of the job on the external scheduler.

~~~
$ flight job delete-job YKOVUcyo
Removed job: YKOVUcyo
~~~

### list-job-results: list the content of the job's results directory

The `list-job-results` command wraps the `ls` utility and will be ran within the job's
results directory. Additional flags can be provided to `ls` by specifying them
after the `--` delimiter.

~~~
$ flight job list-job-results b-4BjcQ-
dir  test.output

$ flight job list-job-results b-4BjcQ- -- -la
drwxr-xr-x. 3 centos centos 4096 May  5 12:31 .
drwxr-xr-x. 3 centos centos 4096 May  5 11:32 ..
drwxr-xr-x. 2 centos centos 4096 May  5 12:32 dir
-rw-r--r--. 1 centos centos   66 May  5 11:32 test.output
~~~

## view-job-results: View a single job's result file

Display a file within the job's results directory.

~~~
$ flight job view-job-results b-4BjcQ- test.output
Hello, World!
This is an example job. It ran on node01 (as centos).
~~~

## view-job-stdout: View the job's standard output

Display the job's standard output.

~~~
$ flight job view-job-stdout b-4BjcQ-
Your results will be stored in: /home/flight/simple.sh-outputs/19
Executing job commands, current working directory is /home/flight
Output file has been generated, please check /home/flight/simple.sh-outputs/19/test.output
~~~

## view-job-stderr: View the job's standard error

Display the job's standard error unless it has been merged with the standard
output.  If merged, it can be displayed with the command `view-job-stdout`.

~~~
$ flight job view-job-stderr b-4BjcQ-
flight job: Cannot display the job's standard error as it has been merged with standard output.
Run 'flight job view-job-stdout b-4BjcQ-` to view the job's output.
~~~

## OTHER COMMAND: run-monitor

The `run-monitor` command is used by the `crontab` to update the internal
monitor cache. Running the command manually is optional, but is useful for
updating the state of fast running jobs. Otherwise it will be called the next
time your cron job is ran.

~~~
$ flight job run-monitor
~~~

## COMMAND OUTPUT FORMAT

The `flight job` utility supports various different output formats depending
on the execution context and provided flags.

The default behaviour uses two different outputs:
* Human readable Unicode output
* Tab separated value output

There are also multiple flags which will augment how the output is displayed:
`--json`, `--verbose`, `--ascii`, and `--pretty`

### Human readable Unicode Output

The human readable output will be returned when ran form an interactive
terminal. It will contain `Unicode` and `ANSI` escape sequences (colors). It
may also be a simplified version of the full output.

### Tab Separated Values

The output toggles to tab separated values when ran in a non-interactive shell.
This allows it to be easily processed with standard command line tools
such as `cut`. This output may contain additional fields/ verbosity when
compared to the human readable output.

The `Unicode` and `ANSI` escape sequences will be omitted from the output.
Instead it will be limited to a standard set of `ASCII` characters. Special
characters (e.g. newline and tab) will be backslash escaped inorder to to
preserve the tab delimiting.

### JSON Output

The output can be toggled to emit JSON with the `--json` flag. The fields
within the JSON response reflect the internally stored structures and are
not directly comparable to the other outputs.

This output is designed for applications which require a high degree of
coupling and consistency.

### Verbose Outputs

The `--verbose` flag toggles the human readable output to display a similar
level of detail when compared to the tab separated values output.

This flag has no affect on the tab separated values output as it is already
verbose. It also does not affect the JSON output.

### Pretty and ASCII Outputs

The `--pretty` flag can be used to force the human readable output to be
emitted in a non-interactive terminal. This is useful when piping the output
into a interactive command (e.g. `less`). This flag will prevent the tab
separated values from being emitted. It has no effect when combined with
`--json`. It maybe combined with the `--verbose` flag.

The `--ascii` flag is similar to `--pretty` in that it emits a human readable
output. However `--ascii` replaces the `Unicode` and ANSI escape sequences
with vanilla ASCII. Otherwise the behaviour between `--ascii` and `--pretty`
is the same.
