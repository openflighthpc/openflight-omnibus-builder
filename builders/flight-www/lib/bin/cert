#!/usr/bin/env ruby
#==============================================================================
# Copyright (C) 2019-present Alces Flight Ltd.
#
# This file is part of Alces Flight Omnibus Builder.
#
# This program and the accompanying materials are made available under
# the terms of the Eclipse Public License 2.0 which is available at
# <https://www.eclipse.org/legal/epl-2.0>, or alternative license
# terms made available by Alces Flight Ltd - please direct inquiries
# about licensing to licensing@alces-flight.com.
#
# This project is distributed in the hope that it will be useful, but
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR
# IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS
# OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A
# PARTICULAR PURPOSE. See the Eclipse Public License 2.0 for more
# details.
#
# You should have received a copy of the Eclipse Public License 2.0
# along with this project. If not, see:
#
#  https://opensource.org/licenses/EPL-2.0
#
# For more information on Alces Flight Omnibus Builder, please visit:
# https://github.com/alces-flight/alces-flight-omnibus-builder
#===============================================================================

# Require the default gems
ENV['BUNDLE_GEMFILE'] ||= File.join(__dir__, '../Gemfile')
require 'rubygems'
require 'bundler'
Bundler.require(:default)

require 'fileutils'

class CertWWW < Hashie::Dash
  def self.root_join(*a)
    File.join(ENV['flight_ROOT'] || raise('Missing flight_ROOT!') , *a)
  end

  HTTPS_SCRIPT = File.join(__dir__, 'https')
  SSL_DIR = root_join('etc/www/ssl')

  def self.slop
    @slop ||= Slop::Options.new.tap do |s|
      s.bool '--self-signed', 'Enable self signed certificates'
      s.bool '--lets-encrypt', 'Enable certificates with LetsEncrypt'
      s.string '--domain', 'The domain associated with LetsEncrypt certificates'
      s.bool '--renewal', 'Enable automatic certificate renewal'
      s.bool '--manual', 'Disable automatic certificate renewal'
      s.bool '--skip', 'Do not regenerate the certificate'
      s.on '--help', '-h', 'Display the help output' do
        $stderr.puts s
        exit
      end
    end
  end

  def self.run(*argv)
    parser = slop.parser.tap(&:reset)
    results = parser.parse(argv)
    new(**results.to_h).run
  rescue Interrupt
    $stderr.puts 'Received Interrupt!'
    exit 130
  end

  def self.run_certbot_create(domain)
    system([
      'sudo certbot certonly --nginx',
      # "-c #{root_join('letsencrypt/cli.ini')}",
      "--nginx-ctl #{root_join('opt/www/embedded/sbin/nginx')}",
      "--nginx-server-root #{root_join('/etc/www')}",
      "--config-dir #{root_join('etc/letsencrypt')}",
      "--domain #{domain}"
    ].join(' '))
  end

  property :self_signed
  property :lets_encrypt
  property :cron
  property :renewal
  property :manual
  property :skip
  property :domain

  def run
    generate_certificates
  end

  def cert_type
    @cert_type ||= begin
      if self_signed && lets_encrypt
        $stderr.puts <<~ERROR.chomp
          Can not use --self-signed with --lets-encrypt
        ERROR
        exit 1
      elsif self_signed
        :self_signed
      elsif lets_encrypt
        :lets_encrypt
      else
        raise NotImplementedError
      end
    end
  end

  def safe_domain
    domain || raise('--domain is required!')
  end

  def letsencrypt_fullchain
    self.class.root_join('etc/letsencrypt/live', safe_domain, 'fullchain.pem')
  end

  def letsencrypt_privkey
    self.class.root_join('etc/letsencrypt/live', safe_domain, 'privkey.pem')
  end

  def generate_certificates
    if cert_type == :self_signed
      system("#{HTTPS_SCRIPT} __create_self_signed")
    else
      self.class.run_certbot_create(safe_domain)
      FileUtils.mkdir_p SSL_DIR
      FileUtils.ln_sf letsencrypt_fullchain, File.join(SSL_DIR, 'fullchain.pem')
      FileUtils.ln_sf letsencrypt_privkey, File.join(SSL_DIR, 'key.pem') # NOTE: Intentionally key.pem not privkey.pem
    end
  end
end

Bundler.with_original_env do
  CertWWW.run(*ARGV)
end

