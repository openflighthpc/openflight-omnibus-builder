#!/usr/bin/env ruby
#==============================================================================
# Copyright (C) 2019-present Alces Flight Ltd.
#
# This file is part of Alces Flight Omnibus Builder.
#
# This program and the accompanying materials are made available under
# the terms of the Eclipse Public License 2.0 which is available at
# <https://www.eclipse.org/legal/epl-2.0>, or alternative license
# terms made available by Alces Flight Ltd - please direct inquiries
# about licensing to licensing@alces-flight.com.
#
# This project is distributed in the hope that it will be useful, but
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR
# IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS
# OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A
# PARTICULAR PURPOSE. See the Eclipse Public License 2.0 for more
# details.
#
# You should have received a copy of the Eclipse Public License 2.0
# along with this project. If not, see:
#
#  https://opensource.org/licenses/EPL-2.0
#
# For more information on Alces Flight Omnibus Builder, please visit:
# https://github.com/alces-flight/alces-flight-omnibus-builder
#===============================================================================

# Require the default gems
ENV['BUNDLE_GEMFILE'] ||= File.join(__dir__, '../Gemfile')
require 'rubygems'
require 'bundler'
Bundler.require(:default)

require 'forwardable'
require 'ostruct'
require 'open3'

require_relative '../lib/shared'

module FlightWWW
  class CertCLI
    extend Forwardable

    def self.root_join(*a)
      Config.root_join(*a)
    end

    HTTPS_SCRIPT = File.join(__dir__, 'https')
    SSL_DIR = root_join('etc/www/ssl')
    CLI_CERT_TYPES = ['self-signed', 'lets-encrypt'].map do |type|
                       [type, type.sub('-', '_')]
                     end.flatten
    NGINX_BIN = root_join('opt/www/embedded/sbin/nginx')
    NGINX_ROOT = root_join('etc/www')
    LETS_ENCRYPT_CONFIG_DIR = root_join('etc/letsencrypt')
    FLEXEC = root_join('bin/flexec')

    def self.slop
      @slop ||= Slop::Options.new.tap do |s|
        s.string '--cert-type', 'Select the certificate type: lets-encrypt|self-signed'
        s.string '--domain', 'The domain associated with the LetsEncrypt certificate'
        s.string '--email', 'The email address associated with the LetsEncrypt certificate'
        s.bool '--config-only', 'Only update the internal configuration, skips certificate generation'
        s.on '--help', '-h', 'Display this help output' do
          $stderr.puts s
          exit
        end
      end
    end

    def self.run(*argv)
      parser = slop.parser.tap(&:reset)
      results = parser.parse(argv)
      os = OpenStruct.new(results.to_h)
      new(os).tap do |cli|
        cli.run unless os.config_only
      end
    rescue Interrupt
      $stderr.puts 'Received Interrupt!'
      exit 130
    end

    attr_reader :config
    def_delegators :@config, :letsencrypt_domain, :letsencrypt_email,
                   :lets_encrypt?, :self_signed?

    def initialize(slop)
      Config.update do |config|
        @config = config

        # Updates the cert_type + sanity check
        if CLI_CERT_TYPES.include?(slop.cert_type)
          config.cert_type = slop.cert_type
        elsif slop.cert_type
          $stderr.puts <<~ERROR.chomp
            Unrecognized certificate type: #{slop.cert_type}
            Please select either: lets-encrypt or self-signed
          ERROR
          exit 1
        elsif config.cert_type?
          # noop
        else
          # Default the command to LetsEncrypt
          $stderr.puts <<~WARN.chomp
            Defaulting to LetsEncrypt
          WARN
          config.cert_type = 'lets_encrypt'
        end

        # Update the domain + sanity check
        if slop.domain && config.self_signed?
          $stderr.puts <<~ERROR.chomp
            Using --domain with self signed certificates is not supported
          ERROR
          exit 1
        elsif slop.domain
          config.letsencrypt_domain = slop.domain
        elsif config.lets_encrypt? && !config.letsencrypt_domain?
          $stderr.puts <<~ERROR.chomp
            Can not use LetsEncrypt without a domain
            Please specify it with: --domain DOMAIN
          ERROR
          exit 1
        end

        # Update the email + sanity check
        if slop.email && config.self_signed?
          $stderr.puts <<~ERROR.chomp
            Using --email with self signed certificates is not supported
          ERROR
          exit 1
        elsif slop.email
          config.letsencrypt_email = slop.email
        elsif config.lets_encrypt? && !config.letsencrypt_email?
          $stderr.puts <<~ERROR.chomp
            Can not use LetsEncrypt without an email
            Please specify it with: --email ADDRESS
          ERROR
          exit 1
        end
      end
    end

    def run
      generate_certificates
      restart_service
    end

    def letsencrypt_fullchain
      self.class.root_join('etc/letsencrypt/live', letsencrypt_domain, 'fullchain.pem')
    end

    def letsencrypt_privkey
      self.class.root_join('etc/letsencrypt/live', letsencrypt_domain, 'privkey.pem')
    end

    def generate_certificates
      if self_signed?
        system("#{HTTPS_SCRIPT} __create_self_signed")
      else
        run_certbot
        FileUtils.mkdir_p SSL_DIR
        FileUtils.ln_sf letsencrypt_fullchain, File.join(SSL_DIR, 'fullchain.pem')
        FileUtils.ln_sf letsencrypt_privkey, File.join(SSL_DIR, 'key.pem') # NOTE: Intentionally key.pem not privkey.pem
      end
    end

    def run_certbot
      stdout, _e, _s = Open3.capture3(FLEXEC, 'flight', 'service', 'status', 'www')
      unless stdout.include?('active')
        $stderr.puts <<~ERROR.chomp
          The www service does not appear to be running, please start it and try again:
          #{FLEXEC} flight service start www
        ERROR
        exit 1
      end

      system('certbot', 'certonly', '-n', '--nginx', '--nginx-ctl', NGINX_BIN,
        '--nginx-server-root', NGINX_ROOT, '--config-dir', LETS_ENCRYPT_CONFIG_DIR,
        '--domain', letsencrypt_domain, '--email', letsencrypt_email, '--agree-tos'
      )
    end

    def restart_service
      system("#{self.class.root_join('bin/flexec')} flight service restart www")
    end
  end
end

Bundler.with_unbundled_env do
  FlightWWW::CertCLI.run(*ARGV)
end

